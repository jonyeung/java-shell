==== A2 phase I marking ====

Group number: group_0294
UTORID usernames of members: chanja49, gillgu19, xiezhang (B due to lack of contributions and CatMe survey), yeungj21
Total deductions: -1.25
Marked by: Brian Lam (brianandrew.lam@mail.utoronto.ca)
Grade: A
[Instructor has increased your mark by +2 letter grade]. Your new letter grade is A+

Your team's Phase II grade is based on this scale:

    http://www.artsandscience.utoronto.ca/ofr/calendar/rules.htm#grading

The way we graded is as follows: your team starts with an A+. When errors and
problems are found, you will lose 0, 1, 2, or 3 letter steps, depending on the
severity. As an example, if you lost two steps, your team would earn an A-:

     A+ -> A
     A -> A-

You were asked to follow the Scrum process. A big part of that is to maintain
a product backlog and a sprint backlog. 

==== Product and Sprint backlogs ==== [up to -6]

Several steps can be lost for these kinds of issues:

  No evidence of Product or Sprint backlog -6
  No evidence of team assigning tasks to team members -3
  SB items not taken directly from PB -1
  SB items not broken down into smaller steps -1
  PB, SB uses noticeably bad grammar and/or spelling -2

[TA Comments]
Clear assignment of tasks.

==== Java Style ==== [up to -6]

Steps can be lost for these kinds of issues:

    Java naming conventions not followed (camelCase, no_underscores) -1
    Instance variable names not meaningful (e.g., "Label1" is not a good name) -1
    Bad indentation -1
    Lack of consistency in style across files -1
    Bad use of whitespace: too much or too little -1
    Class names are frequently not noun phrases -1
    Method names are frequently not verb phrases -1
    Not following the 80character column width limit. -1

[TA Comments]
Good Java style.

==== Design ==== [up to -6]

Several steps can be lost for these kinds of issues:

    public instance variables instead of setters and getters -1 to -2
    not a good breakdown of classes and methods (everything static; no ability
        to, for example, make two shells that coexist; not extensible) -1
    long methods exist (more than roughly 30 lines from brace to brace) -1
    hard to add new commands -1
    no unified path handling mechanism -2
    redirection doesn't easily incorporate new commands -2

[TA Comments]
The design will suffice for Assignment 2A, but can be improved upon.

==== Javadoc ==== [up to -3]

Several steps can be lost for these kinds of issues:

    Missing Javadoc on methods -1 for infrequent problems, up to -3 for frequent
    Missing Javadoc on class -1
    No Javadoc on instance vars -1
    Missing use @param and @return tags -1
    Unclear English: bad grammar, bad spelling up to -2

[TA Comments]
Good Javadocs. However, you should never leave @throws with an empty description. (-1)

==== Testing ==== [up to -6] 
Several steps can be lost for these kinds of issues:

    No test cases exist for public methods -6
    Some testing done for all classes and methods, but not thoroughly up to -3
    Test quality is inadequate or tests uninformative -1 to -2
        e.g., testing using lots of print statements instead of assert calls
    Code not written to be testable -2

[TA Comments]
Good testing.

==== Correctness ==== [up to -6]

    Code doesn't compile without modification (if the fix is simple) -1
    Code that is complete (from the SB) doesn't work completely: up to -2
    Code crashes: -3
    Each missing/incomplete feature -1

Failed Test Cases (-0.25 * 1 = -0.25):
1) Exit with whitespace
               exit
   Expected: The program should exit.
   Actual: The program doesn't exit.

Comments:
Good design overall. Your next step is to reconsider the way you store valid
commands. Storing them in a String array works, but it requires you to traverse
the array to see if it is a valid command. A better alternative is a HashTable
since you can easily access it directly. Also, it could even be used for
your minimum and maximum argument.
